name: Appium Android Tests

on:
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: true
        default: 'Run appium tests'

jobs:
  test:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install -g appium
           
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools: 'latest'

    - name: Accept licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
    - name: Install Android packages
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3" "emulator" "system-images;android-30;google_apis;x86_64"
      
    - name: Create and Verify AVD
      run: |
        # Delete existing AVD if present
        $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager delete avd -n test || true
        
        # Create new AVD
        echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" -d "pixel"
        
        # Verify AVD creation
        $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd

    - name: Start Emulator with Detailed Logging
      run: |
        # Free up port 5554
        lsof -ti :5554 | xargs kill -9 || true
        
        # Start emulator with verbose logging
        $ANDROID_HOME/emulator/emulator -avd test -no-window -noaudio -no-boot-anim -ports 5554,5555 -verbose > emulator.log 2>&1 &
        echo "Emulator started in background"
        
        # Tail logs for debugging
        tail -f emulator.log &
        TAIL_PID=$!
        
        # Wait for emulator to start
        sleep 30
        kill $TAIL_PID

    - name: Wait for Device Connection
      run: |
        # Reset ADB connection
        adb kill-server
        adb start-server
        
        # Wait for device with timeout
        timeout 300 bash -c 'until adb devices | grep -q "emulator-5554"; do sleep 5; echo "Waiting for emulator..."; done'
        
        # Verify device state
        adb -s emulator-5554 wait-for-device
        adb -s emulator-5554 shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 5; done;'
        
        # Additional verification
        adb -s emulator-5554 shell input keyevent 82
        echo "Emulator is fully ready"

    - name: Verify Emulator Functionality
      run: |
        adb devices
        adb -s emulator-5555 shell pm list packages
        echo "Emulator verification successful"

    - name: Start Appium server
      run: |
        appium --log-level error --relaxed-security &
        sleep 15
        echo "Appium server started"
        
    - name: Run tests
      run: |
        api-level: 33
        arch: x86_64
        profile: Pixel XL
        disable-animations: true
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        pytest --html=report.html --self-contained-html

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-artifacts
        path: |
          report.html
          emulator.log

    - name: Cleanup
      if: always()
      run: |
        adb -s emulator-5554 emu kill || true
        adb kill-server || true
        pkill -f "appium" || true
       
